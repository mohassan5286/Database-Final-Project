-- MySQL Script generated by MySQL Workbench
-- Sat Dec 28 07:41:22 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema smartparkingcity
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema smartparkingcity
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `smartparkingcity` DEFAULT CHARACTER SET utf8mb3 ;
USE `smartparkingcity` ;

-- -----------------------------------------------------
-- Table `smartparkingcity`.`admin`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartparkingcity`.`admin` (
  `AdminID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL DEFAULT '',
  `Email` VARCHAR(45) NOT NULL DEFAULT '',
  `Password` VARCHAR(45) NOT NULL DEFAULT '',
  PRIMARY KEY (`AdminID`),
  INDEX `idx_admin_signin` (`Email` ASC, `Password` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `smartparkingcity`.`parkinglot`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartparkingcity`.`parkinglot` (
  `LotID` INT NOT NULL AUTO_INCREMENT,
  `Directions` VARCHAR(45) NOT NULL DEFAULT '',
  `Location` VARCHAR(45) NOT NULL DEFAULT '',
  `Capacity` VARCHAR(45) NOT NULL DEFAULT '',
  `Admin_AdminID` INT NOT NULL DEFAULT '1',
  `Revenue` INT NULL DEFAULT '0',
  PRIMARY KEY (`LotID`),
  INDEX `fk_ParkingLot_Admin1_idx` (`Admin_AdminID` ASC) VISIBLE,
  INDEX `idx_parking_lot_id` (`LotID` ASC) VISIBLE,
  CONSTRAINT `fk_ParkingLot_Admin1`
    FOREIGN KEY (`Admin_AdminID`)
    REFERENCES `smartparkingcity`.`admin` (`AdminID`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `smartparkingcity`.`parkingspot`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartparkingcity`.`parkingspot` (
  `SpotID` INT NOT NULL AUTO_INCREMENT,
  `Type` VARCHAR(45) NOT NULL DEFAULT 'Standard',
  `Status` VARCHAR(45) NOT NULL DEFAULT 'Available',
  `Price` INT NOT NULL DEFAULT '0',
  `ParkingLot_LotID` INT NOT NULL DEFAULT '1',
  PRIMARY KEY (`SpotID`),
  INDEX `fk_ParkingSpot_ParkingLot1_idx` (`ParkingLot_LotID` ASC) VISIBLE,
  INDEX `idx_parking_spot_id` (`SpotID` ASC) VISIBLE,
  CONSTRAINT `fk_ParkingSpot_ParkingLot1`
    FOREIGN KEY (`ParkingLot_LotID`)
    REFERENCES `smartparkingcity`.`parkinglot` (`LotID`))
ENGINE = InnoDB
AUTO_INCREMENT = 15
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `smartparkingcity`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartparkingcity`.`user` (
  `idUser` INT NOT NULL AUTO_INCREMENT,
  `Debt` INT NULL DEFAULT '0',
  `LicensePlate` VARCHAR(45) NOT NULL DEFAULT '',
  `Name` VARCHAR(45) NOT NULL DEFAULT '',
  `Password` VARCHAR(45) NOT NULL DEFAULT '',
  `PaymentMethod` VARCHAR(45) NOT NULL DEFAULT 'Credit Card',
  `Admin_AdminID` INT NOT NULL DEFAULT '1',
  `Email` VARCHAR(45) NOT NULL DEFAULT '',
  PRIMARY KEY (`idUser`),
  UNIQUE INDEX `idx_user_email` (`Email` ASC) VISIBLE,
  INDEX `fk_User_Admin_idx` (`Admin_AdminID` ASC) VISIBLE,
  INDEX `idx_user_signin` (`Email` ASC, `Password` ASC) VISIBLE,
  INDEX `idx_user_id` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_User_Admin`
    FOREIGN KEY (`Admin_AdminID`)
    REFERENCES `smartparkingcity`.`admin` (`AdminID`))
ENGINE = InnoDB
AUTO_INCREMENT = 8
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `smartparkingcity`.`reservation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartparkingcity`.`reservation` (
  `ReservationID` INT NOT NULL AUTO_INCREMENT,
  `Arrived` VARCHAR(45) NOT NULL DEFAULT 'No',
  `StartTime` VARCHAR(45) NOT NULL DEFAULT '',
  `EndTime` VARCHAR(45) NOT NULL DEFAULT '',
  `User_idUser` INT NOT NULL DEFAULT '1',
  `ParkingSpot_SpotID` INT NOT NULL DEFAULT '1',
  PRIMARY KEY (`ReservationID`),
  INDEX `fk_Reservation_User1_idx` (`User_idUser` ASC) VISIBLE,
  INDEX `fk_Reservation_ParkingSpot1_idx` (`ParkingSpot_SpotID` ASC) VISIBLE,
  CONSTRAINT `fk_Reservation_ParkingSpot1`
    FOREIGN KEY (`ParkingSpot_SpotID`)
    REFERENCES `smartparkingcity`.`parkingspot` (`SpotID`),
  CONSTRAINT `fk_Reservation_User1`
    FOREIGN KEY (`User_idUser`)
    REFERENCES `smartparkingcity`.`user` (`idUser`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb3;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;





SET FOREIGN_KEY_CHECKS = 0;
SET FOREIGN_KEY_CHECKS = 1;



DELIMITER $$

CREATE PROCEDURE InsertNewUser(
    IN p_Name VARCHAR(45),
    IN p_Email VARCHAR(45),
    IN p_Password VARCHAR(45),
    IN p_LicensePlate VARCHAR(45),
    IN p_PaymentMethod VARCHAR(45),
    IN p_Debt INT,
    IN p_AdminID INT
)
BEGIN
    INSERT INTO smartparkingcity.User (
        Name, Email, Password, LicensePlate, PaymentMethod, Debt, Admin_AdminID
    ) VALUES (
        p_Name, p_Email, p_Password, p_LicensePlate, p_PaymentMethod, p_Debt, p_AdminID
    );
END$$

DELIMITER ;

-- Add a unique index for Email in the User table
-- CREATE INDEX idx_user_email ON smartparkingcity.User (Email); 


DELIMITER $$

CREATE PROCEDURE UserSignIn(
    IN p_Email VARCHAR(45),
    IN p_Password VARCHAR(45),
    OUT p_UserID INT
)
BEGIN
    SELECT idUser
    INTO p_UserID
    FROM smartparkingcity.User
    WHERE Email = p_Email AND Password = p_Password
    LIMIT 1;

    -- If no match, set p_UserID to NULL
    IF p_UserID IS NULL THEN
        SET p_UserID = NULL;
    END IF;
END$$

DELIMITER ;

-- Create a composite index for Email and Password in the User table


-- CREATE INDEX idx_user_signin ON smartparkingcity.User (Email, Password);



DELIMITER $$

CREATE PROCEDURE AdminSignIn(
    IN p_Email VARCHAR(45),
    IN p_Password VARCHAR(45),
    OUT p_AdminID INT
)
BEGIN
    SELECT AdminID
    INTO p_AdminID
    FROM smartparkingcity.Admin
    WHERE Email = p_Email AND Password = p_Password
    LIMIT 1;

    -- If no match, set p_AdminID to NULL
    IF p_AdminID IS NULL THEN
        SET p_AdminID = NULL;
    END IF;
END$$

DELIMITER ;

-- Create a composite index for Email and Password in the Admin table
-- CREATE INDEX idx_admin_signin ON smartparkingcity.Admin (Email,Password);



DELIMITER $$

CREATE PROCEDURE GetUserInfoByID(
    IN p_UserID INT,
    OUT p_Name VARCHAR(45),
    OUT p_Email VARCHAR(45),
    OUT p_LicensePlate VARCHAR(45),
    OUT p_PaymentMethod VARCHAR(45),
    OUT p_Debt INT
)
BEGIN
    SELECT Name, Email, LicensePlate, PaymentMethod, Debt
    INTO p_Name, p_Email, p_LicensePlate, p_PaymentMethod, p_Debt
    FROM smartparkingcity.User
    WHERE idUser = p_UserID;
END$$

DELIMITER ;

-- Create an index for idUser in the User table
-- CREATE INDEX idx_user_id ON smartparkingcity.User (idUser);



DELIMITER $$

CREATE PROCEDURE GetAllLotsProfiles()
BEGIN
    SELECT LotID, Directions, Location, Capacity, Revenue
    FROM smartparkingcity.ParkingLot;
END$$

DELIMITER ;

-- Create an index for LotID in the ParkingLot table
-- CREATE INDEX idx_parking_lot_id ON smartparkingcity.ParkingLot (LotID);



DELIMITER $$

CREATE PROCEDURE GetAllUsers()
BEGIN
    SELECT idUser, Name, Email, LicensePlate, PaymentMethod, Debt
    FROM smartparkingcity.User;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE RemoveUserByID(
    IN p_UserID INT,
    IN p_AdminID INT
)
BEGIN
    DELETE FROM smartparkingcity.User
    WHERE idUser = p_UserID AND Admin_AdminID = p_AdminID;
END$$

DELIMITER ;



DELIMITER $$

CREATE PROCEDURE ReserveSpot(
    IN p_SpotID INT,
    IN p_UserID INT,
    IN p_AdminID INT,
    IN p_StartTime DATETIME,
    IN p_EndTime DATETIME
)
BEGIN
    INSERT INTO smartparkingcity.Reservation (
        ParkingSpot_SpotID, User_idUser, User_Admin_AdminID, StartTime, EndTime
    ) VALUES (
        p_SpotID, p_UserID, p_AdminID, p_StartTime, p_EndTime
    );
END$$

DELIMITER ;

-- Create an index for SpotID in the ParkingSpot table
-- CREATE INDEX idx_parking_spot_id ON smartparkingcity.ParkingSpot (SpotID);


DELIMITER $$

CREATE TRIGGER UpdateParkingSpotStatus
AFTER INSERT ON smartparkingcity.Reservation
FOR EACH ROW
BEGIN
    DECLARE currentTime DATETIME;
    SET currentTime = NOW();

    -- Update parking spot status based on current time
    IF currentTime BETWEEN NEW.StartTime AND NEW.EndTime THEN
        UPDATE smartparkingcity.ParkingSpot
        SET Status = 'Reserved'
        WHERE SpotID = NEW.ParkingSpot_SpotID;
        
    ELSE
        UPDATE smartparkingcity.ParkingSpot
        SET Status = 'Available'
        WHERE SpotID = NEW.ParkingSpot_SpotID;
        
    END IF;
END$$

DELIMITER ;



DELIMITER //

CREATE EVENT UpdateSpotStatusAndDebt
ON SCHEDULE EVERY 1 MINUTE
DO
BEGIN
    -- Update ParkingSpot status to 'Available' for expired reservations
    UPDATE smartparkingcity.ParkingSpot PS
    INNER JOIN smartparkingcity.Reservation R
    ON PS.SpotID = R.ParkingSpot_SpotID
    SET PS.Status = 'Available'
    WHERE R.EndTime < NOW();

    -- Apply penalty for users who did not arrive
    UPDATE smartparkingcity.User U
    INNER JOIN smartparkingcity.Reservation R
    ON U.idUser = R.User_idUser
    SET U.Debt = 500
    WHERE R.EndTime < NOW() AND R.Arrived = 'No';
END;
//

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE ReserveParkingSpot(
    IN p_SpotID INT,
    IN p_LotID INT,
    IN p_AdminID INT,
    IN p_UserID INT,
    IN p_StartTime DATETIME,
    IN p_EndTime DATETIME
)
BEGIN
    DECLARE spotStatus VARCHAR(45);

    -- Start transaction for concurrency control
    START TRANSACTION;

    -- Lock the specific parking spot row to prevent other users from reserving it simultaneously
    SELECT Status INTO spotStatus
    FROM smartparkingcity.ParkingSpot
    WHERE SpotID = p_SpotID 
      AND ParkingLot_LotID = p_LotID 
      AND ParkingLot_Admin_AdminID = p_AdminID
    FOR UPDATE;

    -- Check if the spot is currently available
    IF spotStatus = 'Available' THEN
        -- Insert the reservation into the Reservation table
        INSERT INTO smartparkingcity.Reservation (
            Arrived, StartTime, EndTime, 
            User_idUser, User_Admin_AdminID, 
            ParkingSpot_SpotID, ParkingSpot_ParkingLot_LotID, ParkingSpot_ParkingLot_Admin_AdminID
        )
        VALUES (
            'No', p_StartTime, p_EndTime, 
            p_UserID, p_AdminID, 
            p_SpotID, p_LotID, p_AdminID
        );

        -- Commit the transaction if the reservation is successful
        COMMIT;
    ELSE
        -- Rollback the transaction if the spot is not available
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Parking spot is not available.';
    END IF;
END$$

DELIMITER ;


-- Populate Admin Table
INSERT INTO smartparkingcity.Admin (AdminID, Name, Email, Password)
VALUES
    (1, 'John Doe', 'admin1@parkingsystem.com', 'password123'),
    (2, 'Jane Smith', 'admin2@parkingsystem.com', 'password456'),
    (3, 'Samuel Wilson', 'admin3@parkingsystem.com', 'password789'),
    (4, 'Emily Johnson', 'admin4@parkingsystem.com', 'password321');



-- Populate User Table
INSERT INTO smartparkingcity.User (idUser, Debt, LicensePlate, Name, Password, PaymentMethod, Admin_AdminID, Email)
VALUES
    (1, 0, 'ABC123', 'Alice Johnson', 'alicepass', 'Credit Card', 1, 'alice@example.com'),
    (2, 20, 'XYZ789', 'Bob Brown', 'bobpass', 'Cash', 1, 'bob@example.com'),
    (3, 10, 'LMN456', 'ReserveSpotCharlie Davis', 'charliepass', 'Debit Card', 2, 'charlie@example.com'),
    (4, 0, 'JKL123', 'Diana Prince', 'dianapass', 'Credit Card', 2, 'diana@example.com'),
    (5, 15, 'NOP456', 'Bruce Wayne', 'brucepass', 'Mobile Payment', 3, 'bruce@example.com'),
    (6, 30, 'QRS789', 'Clark Kent', 'clarkpass', 'Credit Card', 4, 'clark@example.com'),
    (7, 5, 'TUV001', 'Tony Stark', 'tonypass', 'Cash', 3, 'tony@example.com');


-- Populate ParkingLot Table
INSERT INTO smartparkingcity.ParkingLot (LotID, Directions, Location, Capacity, Admin_AdminID, Revenue)
VALUES
    (1, 'Turn left after main gate', 'Downtown Garage', 100, 1, 5000),
    (2, 'Next to the mall entrance', 'Mall Parking', 150, 2, 7500),
    (3, 'Near the north gate', 'City Center Parking', 120, 3, 3000),
    (4, 'Behind the supermarket', 'Supermart Lot', 80, 4, 2000),
    (5, 'Next to the stadium', 'Stadium Parking', 200, 1, 10000);



-- Populate ParkingSpot Table
INSERT INTO smartparkingcity.ParkingSpot (SpotID, Type, Status, Price, ParkingLot_LotID)
VALUES
    (1, 'Regular', 'Available', 10, 1),
    (2, 'EV', 'Reserved', 15, 1),
    (3, 'Disabled', 'Available', 12, 1),
    (4, 'Regular', 'Available', 10, 2),
    (5, 'EV', 'Occupied', 20, 2),
    (6, 'Regular', 'Available', 8, 3),
    (7, 'Disabled', 'Occupied', 10, 3),
    (8, 'EV', 'Reserved', 15, 3),
    (9, 'Regular', 'Available', 10, 4),
    (10, 'Regular', 'Occupied', 12, 4),
    (11, 'Disabled', 'Available', 10, 5),
    (12, 'EV', 'Available', 20, 5),
    (13, 'Regular', 'Available', 10, 5),
    (14, 'Regular', 'Occupied', 10, 2);


INSERT INTO smartparkingcity.Reservation 
    (ReservationID, Arrived, StartTime, EndTime, User_idUser, ParkingSpot_SpotID)
VALUES 
    (1, 'No', '2024-12-26 09:00:00', '2024-12-26 12:00:00', 1, 2),
    (2, 'Yes', '2024-12-26 08:00:00', '2024-12-26 10:00:00', 2, 5),
    (3, 'No', '2024-12-26 14:00:00', '2024-12-26 16:00:00', 3, 14),
    (4, 'Yes', '2024-12-25 18:00:00', '2024-12-25 20:00:00', 4, 7),
    (5, 'Yes', '2024-12-26 10:00:00', '2024-12-26 13:00:00', 5, 6),
    (6, 'No', '2024-12-26 15:00:00', '2024-12-26 17:00:00', 6, 8);



    
UPDATE smartparkingcity.ParkingLot
SET Directions = 'Move 20m to the left,and 5m right'
WHERE LotID = 1;

UPDATE smartparkingcity.ParkingLot
SET Directions = 'Go straight for 30m, then turn left for 15m'
WHERE LotID = 2;

UPDATE smartparkingcity.ParkingLot
SET Directions = 'Head north for 50m, then turn right for 20m'
WHERE LotID = 3;

UPDATE smartparkingcity.ParkingLot
SET Directions = 'Go straight for 40m, then left after 10m'
WHERE LotID = 4;

UPDATE smartparkingcity.ParkingLot
SET Directions = 'Drive 100m east, then turn left for 30m'
WHERE LotID = 5;


-- SHOW INDEX FROM smartparkingcity.User;
-- DROP INDEX idx_user_signin ON smartparkingcity.User;
-- DROP INDEX idx_user_email ON smartparkingcity.User;

-- CREATE  INDEX idx_user_email ON smartparkingcity.User (Email);
-- Add a unique index for Email in the User table CREATE UNIQUE INDEX idx_user_email ON smartparkingcity.User (Email)


-- Index for the Admin table
CREATE INDEX idx_admin_signin ON smartparkingcity.admin (Email, Password);

-- Index for the ParkingLot table
CREATE INDEX idx_parking_lot_id ON smartparkingcity.ParkingLot (LotID);
CREATE INDEX fk_ParkingLot_Admin1_idx ON smartparkingcity.ParkingLot (Admin_AdminID);

-- Index for the ParkingSpot table
CREATE INDEX idx_parking_spot_id ON smartparkingcity.ParkingSpot (SpotID);
CREATE INDEX fk_ParkingSpot_ParkingLot1_idx ON smartparkingcity.ParkingSpot (ParkingLot_LotID);

-- Index for the User table
CREATE INDEX idx_user_id ON smartparkingcity.user (idUser);
CREATE INDEX idx_user_email ON smartparkingcity.user (Email);
CREATE INDEX idx_user_signin ON smartparkingcity.user (Email, Password);
CREATE INDEX fk_User_Admin_idx ON smartparkingcity.user (Admin_AdminID);

-- Index for the Reservation table
CREATE INDEX fk_Reservation_User1_idx ON smartparkingcity.reservation (User_idUser);
CREATE INDEX fk_Reservation_ParkingSpot1_idx ON smartparkingcity.reservation (ParkingSpot_SpotID);



-- Check indexes on the admin table
SHOW INDEX FROM smartparkingcity.admin;

-- Check indexes on the parkingtable table
SHOW INDEX FROM smartparkingcity.ParkingLot;

-- Check indexes on the parkingowner table
SHOW INDEX FROM smartparkingcity.ParkingSpot;

-- Check indexes on the user table
SHOW INDEX FROM smartparkingcity.user;
